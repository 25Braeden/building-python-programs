{
    "questions": [
      {
        "question": "What is the correct way to define a function named `greet` that takes no parameters?",
        "options": [
          "function greet():",
          "def greet():",
          "greet def():",
          "func greet():"
        ],
        "correctAnswer": "def greet():"
      },
      {
        "question": "How do you call a function named `add_numbers` with arguments 3 and 5?",
        "options": [
          "add_numbers(3, 5)",
          "call add_numbers(3, 5)",
          "add_numbers.call(3, 5)",
          "3.add_numbers(5)"
        ],
        "correctAnswer": "add_numbers(3, 5)"
      },
      {
        "question": "What does this function return?\n\n```python\ndef square(x):\n    return x * x\n\nresult = square(4)\n```",
        "options": [
          "4",
          "8",
          "16",
          "Error"
        ],
        "correctAnswer": "16"
      },
      {
        "question": "What will this code print?\n\n```python\ndef func(a, b=2):\n    return a + b\n\nprint(func(3))\n```",
        "options": [
          "3",
          "5",
          "2",
          "Error"
        ],
        "correctAnswer": "5"
      },
      {
        "question": "What does this code print?\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(3))\n```",
        "options": [
          "6",
          "3",
          "1",
          "Error"
        ],
        "correctAnswer": "6"
      },
      {
        "question": "Which of the following correctly defines a lambda that doubles its input `x`?",
        "options": [
          "double = lambda x: x * 2",
          "double = x => x * 2",
          "lambda double(x): x * 2",
          "double = function(x): x * 2"
        ],
        "correctAnswer": "double = lambda x: x * 2"
      },
      {
        "question": "How do you define a function that accepts any number of positional arguments?",
        "options": [
          "def func(*args):",
          "def func(args*):",
          "def func(...args):",
          "def func(&args):"
        ],
        "correctAnswer": "def func(*args):"
      },
      {
        "question": "What will this code print?\n\n```python\ndef outer():\n    x = \"local\"\n    def inner():\n        print(x)\n    inner()\nouter()\n```",
        "options": [
          "local",
          "Error",
          "None",
          ""
        ],
        "correctAnswer": "local"
      }
    ]
  }
  